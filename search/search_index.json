{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FastAPI Auth Middleware We at Code Specialist love FastAPI for its simplicity and feature-richness. Though we were a bit staggered by the poor documentation and integration of auth-concepts. That's why we wrote a FastAPI Auth Middleware . It integrates seamlessly into FastAPI applications and requires minimum configuration. It is built upon Starlette and thereby requires no dependencies you do not have included anyway. Caution : This is a middleware to plug in existing authentication. Even though we offer some sample code, this package assumes you already have a way to generate and verify whatever you use, to authenticate your users. In most of the usual cases this will be an access token or bearer. For instance as in OAuth2 or Open ID Connect . Install pip install fastapi-auth-middleware Why FastAPI Auth Middlware? Application or Route scoped automatic authorization and authentication with the perks of dependency injection (But without inflated signatures due to Depends() ) Lightweight without additional dependencies Easy to configure Easy to extend and adjust to specific needs Plug-and-Play feeling Usage The usage of this middleware requires you to provide a single function that validates a given authorization header. The middleware will extract the content of the Authorization HTTP header and inject it into your function that returns a list of scopes and a user object. The list of scopes may be empty if you do not use any scope based concepts. The user object must be a BaseUser or any inheriting class such as FastAPIUser . Thereby, your verify_authorization_header function must implement a signature that contains a string as an input and a Tuple of a List of strings and a BaseUser as output: from typing import Tuple , List from fastapi_auth_middleware import FastAPIUser from starlette.authentication import BaseUser ... # Takes a string that will look like 'Bearer eyJhbGc...' def verify_authorization_header ( auth_header : str ) -> Tuple [ List [ str ], BaseUser ]: # Returns a Tuple of a List of scopes (string) and a BaseUser user = FastAPIUser ( first_name = \"Code\" , last_name = \"Specialist\" , user_id = 1 ) # Usually you would decode the JWT here and verify its signature to extract the 'sub' scopes = [] # You could for instance use the scopes provided in the JWT or request them by looking up the scopes with the 'sub' somewhere return scopes , user This function is then included as an keyword argument when adding the middleware to the app. from fastapi import FastAPI from fastapi_auth_middleware import AuthMiddleware ... app = FastAPI () app . add_middleware ( AuthMiddleware , verify_authorization_header = verify_authorization_header ) After adding this middleware, all requests will pass the verify_authorization_header function and contain the scopes as well as the user object as injected dependencies. All requests now pass the verify_authorization_header method. You may also verify that users posses scopes with requires : from starlette.authentication import requires ... @app . get ( \"/\" ) @requires ([ \"admin\" ]) # Will result in an HTTP 401 if the scope is not matched def some_endpoint (): ... You are also able to use the user object you injected on the request object: from starlette.requests import Request ... @app . get ( '/' ) def home ( request : Request ): return f \"Hello { request . user . first_name } \" # Assuming you use the FastAPIUser object Examples Various examples on how to use this middleware are available at https://code-specialist.github.io/fastapi-auth-middleware/examples","title":"Introduction"},{"location":"#fastapi-auth-middleware","text":"We at Code Specialist love FastAPI for its simplicity and feature-richness. Though we were a bit staggered by the poor documentation and integration of auth-concepts. That's why we wrote a FastAPI Auth Middleware . It integrates seamlessly into FastAPI applications and requires minimum configuration. It is built upon Starlette and thereby requires no dependencies you do not have included anyway. Caution : This is a middleware to plug in existing authentication. Even though we offer some sample code, this package assumes you already have a way to generate and verify whatever you use, to authenticate your users. In most of the usual cases this will be an access token or bearer. For instance as in OAuth2 or Open ID Connect .","title":"FastAPI Auth Middleware"},{"location":"#install","text":"pip install fastapi-auth-middleware","title":"Install"},{"location":"#why-fastapi-auth-middlware","text":"Application or Route scoped automatic authorization and authentication with the perks of dependency injection (But without inflated signatures due to Depends() ) Lightweight without additional dependencies Easy to configure Easy to extend and adjust to specific needs Plug-and-Play feeling","title":"Why FastAPI Auth Middlware?"},{"location":"#usage","text":"The usage of this middleware requires you to provide a single function that validates a given authorization header. The middleware will extract the content of the Authorization HTTP header and inject it into your function that returns a list of scopes and a user object. The list of scopes may be empty if you do not use any scope based concepts. The user object must be a BaseUser or any inheriting class such as FastAPIUser . Thereby, your verify_authorization_header function must implement a signature that contains a string as an input and a Tuple of a List of strings and a BaseUser as output: from typing import Tuple , List from fastapi_auth_middleware import FastAPIUser from starlette.authentication import BaseUser ... # Takes a string that will look like 'Bearer eyJhbGc...' def verify_authorization_header ( auth_header : str ) -> Tuple [ List [ str ], BaseUser ]: # Returns a Tuple of a List of scopes (string) and a BaseUser user = FastAPIUser ( first_name = \"Code\" , last_name = \"Specialist\" , user_id = 1 ) # Usually you would decode the JWT here and verify its signature to extract the 'sub' scopes = [] # You could for instance use the scopes provided in the JWT or request them by looking up the scopes with the 'sub' somewhere return scopes , user This function is then included as an keyword argument when adding the middleware to the app. from fastapi import FastAPI from fastapi_auth_middleware import AuthMiddleware ... app = FastAPI () app . add_middleware ( AuthMiddleware , verify_authorization_header = verify_authorization_header ) After adding this middleware, all requests will pass the verify_authorization_header function and contain the scopes as well as the user object as injected dependencies. All requests now pass the verify_authorization_header method. You may also verify that users posses scopes with requires : from starlette.authentication import requires ... @app . get ( \"/\" ) @requires ([ \"admin\" ]) # Will result in an HTTP 401 if the scope is not matched def some_endpoint (): ... You are also able to use the user object you injected on the request object: from starlette.requests import Request ... @app . get ( '/' ) def home ( request : Request ): return f \"Hello { request . user . first_name } \" # Assuming you use the FastAPIUser object","title":"Usage"},{"location":"#examples","text":"Various examples on how to use this middleware are available at https://code-specialist.github.io/fastapi-auth-middleware/examples","title":"Examples"},{"location":"api-reference/auth-backend/","text":"AuthBackend Auth Backend for FastAPI Source code in fastapi_auth_middleware/middleware.py class FastAPIAuthBackend ( AuthenticationBackend ): \"\"\" Auth Backend for FastAPI \"\"\" def __init__ ( self , verify_authorization_header : callable ): \"\"\" Auth Backend constructor. Part of an AuthenticationMiddleware as backend. Args: verify_authorization_header (callable): A function handle that returns a list of scopes and a BaseUser \"\"\" self . verify_authorization_header = verify_authorization_header async def authenticate ( self , conn : HTTPConnection ) -> Tuple [ AuthCredentials , BaseUser ]: \"\"\" The 'magic' happens here. The authenticate method is invoked each time a route is called that the middleware is applied to. Args: conn (HTTPConnection): An HTTP connection by FastAPI/Starlette Returns: Tuple[AuthCredentials, BaseUser]: A tuple of AuthCredentials (scopes) and a user object that is or inherits from BaseUser \"\"\" if \"Authorization\" not in conn . headers : raise AuthenticationError ( \"Authorization header missing\" ) authorization_header : str = conn . headers [ \"Authorization\" ] scopes , user = self . verify_authorization_header ( authorization_header ) return AuthCredentials ( scopes = scopes ), user __init__ ( self , verify_authorization_header ) special Auth Backend constructor. Part of an AuthenticationMiddleware as backend. Parameters: Name Type Description Default verify_authorization_header callable A function handle that returns a list of scopes and a BaseUser required Source code in fastapi_auth_middleware/middleware.py def __init__ ( self , verify_authorization_header : callable ): \"\"\" Auth Backend constructor. Part of an AuthenticationMiddleware as backend. Args: verify_authorization_header (callable): A function handle that returns a list of scopes and a BaseUser \"\"\" self . verify_authorization_header = verify_authorization_header authenticate ( self , conn ) async The 'magic' happens here. The authenticate method is invoked each time a route is called that the middleware is applied to. Parameters: Name Type Description Default conn HTTPConnection An HTTP connection by FastAPI/Starlette required Returns: Type Description Tuple[AuthCredentials, BaseUser] A tuple of AuthCredentials (scopes) and a user object that is or inherits from BaseUser Source code in fastapi_auth_middleware/middleware.py async def authenticate ( self , conn : HTTPConnection ) -> Tuple [ AuthCredentials , BaseUser ]: \"\"\" The 'magic' happens here. The authenticate method is invoked each time a route is called that the middleware is applied to. Args: conn (HTTPConnection): An HTTP connection by FastAPI/Starlette Returns: Tuple[AuthCredentials, BaseUser]: A tuple of AuthCredentials (scopes) and a user object that is or inherits from BaseUser \"\"\" if \"Authorization\" not in conn . headers : raise AuthenticationError ( \"Authorization header missing\" ) authorization_header : str = conn . headers [ \"Authorization\" ] scopes , user = self . verify_authorization_header ( authorization_header ) return AuthCredentials ( scopes = scopes ), user","title":"Backend"},{"location":"api-reference/auth-backend/#authbackend","text":"Auth Backend for FastAPI Source code in fastapi_auth_middleware/middleware.py class FastAPIAuthBackend ( AuthenticationBackend ): \"\"\" Auth Backend for FastAPI \"\"\" def __init__ ( self , verify_authorization_header : callable ): \"\"\" Auth Backend constructor. Part of an AuthenticationMiddleware as backend. Args: verify_authorization_header (callable): A function handle that returns a list of scopes and a BaseUser \"\"\" self . verify_authorization_header = verify_authorization_header async def authenticate ( self , conn : HTTPConnection ) -> Tuple [ AuthCredentials , BaseUser ]: \"\"\" The 'magic' happens here. The authenticate method is invoked each time a route is called that the middleware is applied to. Args: conn (HTTPConnection): An HTTP connection by FastAPI/Starlette Returns: Tuple[AuthCredentials, BaseUser]: A tuple of AuthCredentials (scopes) and a user object that is or inherits from BaseUser \"\"\" if \"Authorization\" not in conn . headers : raise AuthenticationError ( \"Authorization header missing\" ) authorization_header : str = conn . headers [ \"Authorization\" ] scopes , user = self . verify_authorization_header ( authorization_header ) return AuthCredentials ( scopes = scopes ), user","title":"AuthBackend"},{"location":"api-reference/auth-backend/#fastapi_auth_middleware.middleware.FastAPIAuthBackend.__init__","text":"Auth Backend constructor. Part of an AuthenticationMiddleware as backend. Parameters: Name Type Description Default verify_authorization_header callable A function handle that returns a list of scopes and a BaseUser required Source code in fastapi_auth_middleware/middleware.py def __init__ ( self , verify_authorization_header : callable ): \"\"\" Auth Backend constructor. Part of an AuthenticationMiddleware as backend. Args: verify_authorization_header (callable): A function handle that returns a list of scopes and a BaseUser \"\"\" self . verify_authorization_header = verify_authorization_header","title":"__init__()"},{"location":"api-reference/auth-backend/#fastapi_auth_middleware.middleware.FastAPIAuthBackend.authenticate","text":"The 'magic' happens here. The authenticate method is invoked each time a route is called that the middleware is applied to. Parameters: Name Type Description Default conn HTTPConnection An HTTP connection by FastAPI/Starlette required Returns: Type Description Tuple[AuthCredentials, BaseUser] A tuple of AuthCredentials (scopes) and a user object that is or inherits from BaseUser Source code in fastapi_auth_middleware/middleware.py async def authenticate ( self , conn : HTTPConnection ) -> Tuple [ AuthCredentials , BaseUser ]: \"\"\" The 'magic' happens here. The authenticate method is invoked each time a route is called that the middleware is applied to. Args: conn (HTTPConnection): An HTTP connection by FastAPI/Starlette Returns: Tuple[AuthCredentials, BaseUser]: A tuple of AuthCredentials (scopes) and a user object that is or inherits from BaseUser \"\"\" if \"Authorization\" not in conn . headers : raise AuthenticationError ( \"Authorization header missing\" ) authorization_header : str = conn . headers [ \"Authorization\" ] scopes , user = self . verify_authorization_header ( authorization_header ) return AuthCredentials ( scopes = scopes ), user","title":"authenticate()"},{"location":"api-reference/auth-middleware/","text":"AuthMiddleware Factory method, returning an AuthenticationMiddleware Intentionally not named with lower snake case convention as this is a factory method returning a class. Should feel like a class. Parameters: Name Type Description Default app FastAPI The FastAPI instance the middleware should be applied to. The add_middleware function of FastAPI adds the app as first argument by default. required verify_authorization_header callable A function handle that returns a list of scopes and a BaseUser required Examples: def verify_authorization_header ( auth_header : str ) -> Tuple [ List [ str ], FastAPIUser ]: scopes = [ \"admin\" ] user = FastAPIUser ( first_name = \"Code\" , last_name = \"Specialist\" , user_id = 1 ) return scopes , user app = FastAPI () app . add_middleware ( AuthMiddleware , verify_authorization_header = verify_authorization_header ) Source code in fastapi_auth_middleware/middleware.py def AuthMiddleware ( app : FastAPI , verify_authorization_header : callable ): \"\"\" Factory method, returning an AuthenticationMiddleware Intentionally not named with lower snake case convention as this is a factory method returning a class. Should feel like a class. Args: app (FastAPI): The FastAPI instance the middleware should be applied to. The `add_middleware` function of FastAPI adds the app as first argument by default. verify_authorization_header (callable): A function handle that returns a list of scopes and a BaseUser Examples: ```python def verify_authorization_header(auth_header: str) -> Tuple[List[str], FastAPIUser]: scopes = [\"admin\"] user = FastAPIUser(first_name=\"Code\", last_name=\"Specialist\", user_id=1) return scopes, user app = FastAPI() app.add_middleware(AuthMiddleware, verify_authorization_header=verify_authorization_header) ``` \"\"\" return AuthenticationMiddleware ( app , backend = FastAPIAuthBackend ( verify_authorization_header ))","title":"Middleware"},{"location":"api-reference/auth-middleware/#authmiddleware","text":"Factory method, returning an AuthenticationMiddleware Intentionally not named with lower snake case convention as this is a factory method returning a class. Should feel like a class. Parameters: Name Type Description Default app FastAPI The FastAPI instance the middleware should be applied to. The add_middleware function of FastAPI adds the app as first argument by default. required verify_authorization_header callable A function handle that returns a list of scopes and a BaseUser required Examples: def verify_authorization_header ( auth_header : str ) -> Tuple [ List [ str ], FastAPIUser ]: scopes = [ \"admin\" ] user = FastAPIUser ( first_name = \"Code\" , last_name = \"Specialist\" , user_id = 1 ) return scopes , user app = FastAPI () app . add_middleware ( AuthMiddleware , verify_authorization_header = verify_authorization_header ) Source code in fastapi_auth_middleware/middleware.py def AuthMiddleware ( app : FastAPI , verify_authorization_header : callable ): \"\"\" Factory method, returning an AuthenticationMiddleware Intentionally not named with lower snake case convention as this is a factory method returning a class. Should feel like a class. Args: app (FastAPI): The FastAPI instance the middleware should be applied to. The `add_middleware` function of FastAPI adds the app as first argument by default. verify_authorization_header (callable): A function handle that returns a list of scopes and a BaseUser Examples: ```python def verify_authorization_header(auth_header: str) -> Tuple[List[str], FastAPIUser]: scopes = [\"admin\"] user = FastAPIUser(first_name=\"Code\", last_name=\"Specialist\", user_id=1) return scopes, user app = FastAPI() app.add_middleware(AuthMiddleware, verify_authorization_header=verify_authorization_header) ``` \"\"\" return AuthenticationMiddleware ( app , backend = FastAPIAuthBackend ( verify_authorization_header ))","title":"AuthMiddleware"},{"location":"api-reference/user/","text":"FastAPIUser Sample API User that gives basic functionality Source code in fastapi_auth_middleware/middleware.py class FastAPIUser ( BaseUser ): \"\"\" Sample API User that gives basic functionality \"\"\" def __init__ ( self , first_name : str , last_name : str , user_id : any ): \"\"\" FastAPIUser Constructor Args: first_name (str): The first name of the user last_name (str): The last name of the user user_id (any): The user id, most likely an integer or string \"\"\" self . first_name = first_name self . last_name = last_name self . user_id = user_id @property def is_authenticated ( self ) -> bool : \"\"\" Checks if the user is authenticated. This method essentially does nothing, but it could implement session logic for example. Returns: bool: True if the user is authenticated \"\"\" return True @property def display_name ( self ) -> str : \"\"\" Display name of the user \"\"\" return f ' { self . first_name } { self . last_name } ' @property def identity ( self ) -> str : \"\"\" Identification attribute of the user \"\"\" return self . user_id display_name : str property readonly Display name of the user identity : str property readonly Identification attribute of the user is_authenticated : bool property readonly Checks if the user is authenticated. This method essentially does nothing, but it could implement session logic for example. Returns: Type Description bool True if the user is authenticated __init__ ( self , first_name , last_name , user_id ) special FastAPIUser Constructor Parameters: Name Type Description Default first_name str The first name of the user required last_name str The last name of the user required user_id any The user id, most likely an integer or string required Source code in fastapi_auth_middleware/middleware.py def __init__ ( self , first_name : str , last_name : str , user_id : any ): \"\"\" FastAPIUser Constructor Args: first_name (str): The first name of the user last_name (str): The last name of the user user_id (any): The user id, most likely an integer or string \"\"\" self . first_name = first_name self . last_name = last_name self . user_id = user_id","title":"User"},{"location":"api-reference/user/#fastapiuser","text":"Sample API User that gives basic functionality Source code in fastapi_auth_middleware/middleware.py class FastAPIUser ( BaseUser ): \"\"\" Sample API User that gives basic functionality \"\"\" def __init__ ( self , first_name : str , last_name : str , user_id : any ): \"\"\" FastAPIUser Constructor Args: first_name (str): The first name of the user last_name (str): The last name of the user user_id (any): The user id, most likely an integer or string \"\"\" self . first_name = first_name self . last_name = last_name self . user_id = user_id @property def is_authenticated ( self ) -> bool : \"\"\" Checks if the user is authenticated. This method essentially does nothing, but it could implement session logic for example. Returns: bool: True if the user is authenticated \"\"\" return True @property def display_name ( self ) -> str : \"\"\" Display name of the user \"\"\" return f ' { self . first_name } { self . last_name } ' @property def identity ( self ) -> str : \"\"\" Identification attribute of the user \"\"\" return self . user_id","title":"FastAPIUser"},{"location":"api-reference/user/#fastapi_auth_middleware.middleware.FastAPIUser.display_name","text":"Display name of the user","title":"display_name"},{"location":"api-reference/user/#fastapi_auth_middleware.middleware.FastAPIUser.identity","text":"Identification attribute of the user","title":"identity"},{"location":"api-reference/user/#fastapi_auth_middleware.middleware.FastAPIUser.is_authenticated","text":"Checks if the user is authenticated. This method essentially does nothing, but it could implement session logic for example. Returns: Type Description bool True if the user is authenticated","title":"is_authenticated"},{"location":"api-reference/user/#fastapi_auth_middleware.middleware.FastAPIUser.__init__","text":"FastAPIUser Constructor Parameters: Name Type Description Default first_name str The first name of the user required last_name str The last name of the user required user_id any The user id, most likely an integer or string required Source code in fastapi_auth_middleware/middleware.py def __init__ ( self , first_name : str , last_name : str , user_id : any ): \"\"\" FastAPIUser Constructor Args: first_name (str): The first name of the user last_name (str): The last name of the user user_id (any): The user id, most likely an integer or string \"\"\" self . first_name = first_name self . last_name = last_name self . user_id = user_id","title":"__init__()"},{"location":"examples/","text":"Basic example from typing import Tuple , List import uvicorn from fastapi import FastAPI from starlette.requests import Request from fastapi_auth_middleware import AuthMiddleware , FastAPIUser # The method you have to provide def verify_authorization_header ( auth_header : str ) -> Tuple [ List [ str ], FastAPIUser ]: user = FastAPIUser ( first_name = \"Code\" , last_name = \"Specialist\" , user_id = 1 ) # Usually you would decode the JWT here and verify its signature to extract the 'sub' scopes = [] # You could for instance use the scopes provided in the JWT or request them by looking up the scopes with the 'sub' somewhere return scopes , user app = FastAPI () app . add_middleware ( AuthMiddleware , verify_authorization_header = verify_authorization_header ) # Add the middleware with your verification method to the whole application @app . get ( '/' ) # Sample endpoint (secured) def home ( request : Request ): return request . user if __name__ == '__main__' : uvicorn . run ( 'simple:app' , host = \"0.0.0.0\" , port = 8080 ) # Starts the uvicorn ASGI","title":"Basic"},{"location":"examples/#basic-example","text":"from typing import Tuple , List import uvicorn from fastapi import FastAPI from starlette.requests import Request from fastapi_auth_middleware import AuthMiddleware , FastAPIUser # The method you have to provide def verify_authorization_header ( auth_header : str ) -> Tuple [ List [ str ], FastAPIUser ]: user = FastAPIUser ( first_name = \"Code\" , last_name = \"Specialist\" , user_id = 1 ) # Usually you would decode the JWT here and verify its signature to extract the 'sub' scopes = [] # You could for instance use the scopes provided in the JWT or request them by looking up the scopes with the 'sub' somewhere return scopes , user app = FastAPI () app . add_middleware ( AuthMiddleware , verify_authorization_header = verify_authorization_header ) # Add the middleware with your verification method to the whole application @app . get ( '/' ) # Sample endpoint (secured) def home ( request : Request ): return request . user if __name__ == '__main__' : uvicorn . run ( 'simple:app' , host = \"0.0.0.0\" , port = 8080 ) # Starts the uvicorn ASGI","title":"Basic example"},{"location":"examples/multiple/","text":"Protected and Unprotected Endpoints Currently, there is no support for router level middleware in FastAPI. However, Starlette currently shifts toward supporting this feature and may support it soon. Once Starlette includes this and FastAPI adopts it, there will be a more elegant solution to this. But the current solution is to mount multiple apps instead of routers: multiple.py from typing import Tuple , List import uvicorn from fastapi import FastAPI from starlette.requests import Request from fastapi_auth_middleware import AuthMiddleware , FastAPIUser # The method you have to provide def verify_authorization_header ( auth_header : str ) -> Tuple [ List [ str ], FastAPIUser ]: user = FastAPIUser ( first_name = \"Code\" , last_name = \"Specialist\" , user_id = 1 ) # Usually you would decode the JWT here and verify its signature to extract the 'sub' scopes = [ \"admin\" ] # You could for instance use the scopes provided in the JWT or request them by looking up the scopes with the 'sub' somewhere return scopes , user users_app = FastAPI () users_app . add_middleware ( AuthMiddleware , verify_authorization_header = verify_authorization_header ) # Add the middleware with your verification method to the whole application @users_app . get ( '/' ) # Sample endpoint (secured) def home ( request : Request ): return request . user # Returns the user object that is injected into the request. The FastAPIUser in this case public_app = FastAPI () @public_app . get ( '/home' ) # Sample endpoint (not secured) def home ( request : Request ): return 'Hello World' app = FastAPI () app . mount ( path = \"/user\" , app = users_app ) # Expects an authorization header, due to the auth middleware app . mount ( path = \"/\" , app = public_app ) # Does not use any middleware if __name__ == '__main__' : uvicorn . run ( 'multiple:app' , host = \"0.0.0.0\" , port = 8080 ) # Starts the uvicorn ASGI This will result in an protected endpoint at http:localhost:8080/user/ and an unprotected one at http:localhost:8080/home/ .","title":"Protected and Unprotected endpoints"},{"location":"examples/multiple/#protected-and-unprotected-endpoints","text":"Currently, there is no support for router level middleware in FastAPI. However, Starlette currently shifts toward supporting this feature and may support it soon. Once Starlette includes this and FastAPI adopts it, there will be a more elegant solution to this. But the current solution is to mount multiple apps instead of routers: multiple.py from typing import Tuple , List import uvicorn from fastapi import FastAPI from starlette.requests import Request from fastapi_auth_middleware import AuthMiddleware , FastAPIUser # The method you have to provide def verify_authorization_header ( auth_header : str ) -> Tuple [ List [ str ], FastAPIUser ]: user = FastAPIUser ( first_name = \"Code\" , last_name = \"Specialist\" , user_id = 1 ) # Usually you would decode the JWT here and verify its signature to extract the 'sub' scopes = [ \"admin\" ] # You could for instance use the scopes provided in the JWT or request them by looking up the scopes with the 'sub' somewhere return scopes , user users_app = FastAPI () users_app . add_middleware ( AuthMiddleware , verify_authorization_header = verify_authorization_header ) # Add the middleware with your verification method to the whole application @users_app . get ( '/' ) # Sample endpoint (secured) def home ( request : Request ): return request . user # Returns the user object that is injected into the request. The FastAPIUser in this case public_app = FastAPI () @public_app . get ( '/home' ) # Sample endpoint (not secured) def home ( request : Request ): return 'Hello World' app = FastAPI () app . mount ( path = \"/user\" , app = users_app ) # Expects an authorization header, due to the auth middleware app . mount ( path = \"/\" , app = public_app ) # Does not use any middleware if __name__ == '__main__' : uvicorn . run ( 'multiple:app' , host = \"0.0.0.0\" , port = 8080 ) # Starts the uvicorn ASGI This will result in an protected endpoint at http:localhost:8080/user/ and an unprotected one at http:localhost:8080/home/ .","title":"Protected and Unprotected Endpoints"},{"location":"examples/simple_with_scopes/","text":"Basic Example with Scopes from typing import Tuple , List import uvicorn from fastapi import FastAPI from starlette.authentication import requires from starlette.requests import Request from fastapi_auth_middleware import AuthMiddleware , FastAPIUser # The method you have to provide def verify_authorization_header ( auth_header : str ) -> Tuple [ List [ str ], FastAPIUser ]: user = FastAPIUser ( first_name = \"Code\" , last_name = \"Specialist\" , user_id = 1 ) # Usually you would decode the JWT here and verify its signature to extract the 'sub' scopes = [ \"admin\" ] # You could for instance use the scopes provided in the JWT or request them by looking up the scopes with the 'sub' somewhere return scopes , user app = FastAPI () app . add_middleware ( AuthMiddleware , verify_authorization_header = verify_authorization_header ) # Add the middleware with your verification method to the whole application @app . get ( '/home' ) # Sample endpoint (secured) @requires ( \"admin\" ) # Requires the role 'admin' (Will succeed) def home ( request : Request ): return request . user # Returns the user object that is injected into the request. The FastAPIUser in this case @app . get ( '/poweruser' ) # Sample endpoint (secured) @requires ([ \"admin\" , \"poweruser\" ]) # Requires the roles 'admin' and 'poweruser' (Will fail) def poweruser ( request : Request ): return request . user # Returns the user object that is injected into the request. The FastAPIUser in this case if __name__ == '__main__' : uvicorn . run ( 'simple_with_scopes:app' , host = \"0.0.0.0\" , port = 8080 ) # Starts the uvicorn ASGI","title":"Basic with Scopes"},{"location":"examples/simple_with_scopes/#basic-example-with-scopes","text":"from typing import Tuple , List import uvicorn from fastapi import FastAPI from starlette.authentication import requires from starlette.requests import Request from fastapi_auth_middleware import AuthMiddleware , FastAPIUser # The method you have to provide def verify_authorization_header ( auth_header : str ) -> Tuple [ List [ str ], FastAPIUser ]: user = FastAPIUser ( first_name = \"Code\" , last_name = \"Specialist\" , user_id = 1 ) # Usually you would decode the JWT here and verify its signature to extract the 'sub' scopes = [ \"admin\" ] # You could for instance use the scopes provided in the JWT or request them by looking up the scopes with the 'sub' somewhere return scopes , user app = FastAPI () app . add_middleware ( AuthMiddleware , verify_authorization_header = verify_authorization_header ) # Add the middleware with your verification method to the whole application @app . get ( '/home' ) # Sample endpoint (secured) @requires ( \"admin\" ) # Requires the role 'admin' (Will succeed) def home ( request : Request ): return request . user # Returns the user object that is injected into the request. The FastAPIUser in this case @app . get ( '/poweruser' ) # Sample endpoint (secured) @requires ([ \"admin\" , \"poweruser\" ]) # Requires the roles 'admin' and 'poweruser' (Will fail) def poweruser ( request : Request ): return request . user # Returns the user object that is injected into the request. The FastAPIUser in this case if __name__ == '__main__' : uvicorn . run ( 'simple_with_scopes:app' , host = \"0.0.0.0\" , port = 8080 ) # Starts the uvicorn ASGI","title":"Basic Example with Scopes"}]}